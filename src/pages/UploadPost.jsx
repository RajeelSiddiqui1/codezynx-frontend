import React, { useState } from 'react';
import usePost from '../hooks/usePost';
import { useNavigate } from 'react-router';
import { toast } from 'react-hot-toast';
import { Loader2 } from 'lucide-react';

const UploadPost = () => {
  const [postData, setPostData] = useState({
    title: '',
    description: '',
    attachments: null,
  });

  const [showLoader, setShowLoader] = useState(false);
  const { isPending, postMutation } = usePost();
  const navigate = useNavigate();

  const handleChange = (e) => {
    const { name, value, files } = e.target;
    if (name === 'attachments') {
      setPostData({ ...postData, attachments: files[0] });
    } else {
      setPostData({ ...postData, [name]: value });
    }
  };

  const handlePost = (e) => {
    e.preventDefault();
    setShowLoader(true);

    setTimeout(() => {
      const formData = new FormData();
      formData.append('title', postData.title);
      formData.append('description', postData.description);
      if (postData.attachments) {
        formData.append('attachments', postData.attachments);
      }

      postMutation(formData, {
        onSuccess: (data) => {
          toast.success('Post uploaded successfully!');
          if (data?.generatedByAI) {
            toast('Your description was generated by AI ü§ñ', {
              icon: 'ü§ñ',
              style: { background: '#333', color: '#fff' },
            });
          }
          navigate('/');
        },
        onError: (err) => {
          console.error("üß® Full error object:", err);

          const backendMessage = err?.response?.data?.error;
          const message = backendMessage || err?.message || "Upload failed";

          if (message.includes("Information Technology")) {
            toast.error("‚ùå Only IT-related posts are allowed!");
          } else {
            toast.error(message);
          }
        },

      });

      setShowLoader(false);
    }, 5000);
  };

  return (
    <div className="max-w-xl mx-auto p-6 rounded-xl mt-3 border shadow backdrop-blur-md">
      <h2 className="text-2xl font-semibold mb-4">Upload Post</h2>
      <form onSubmit={handlePost} className="space-y-4">
        <div>
          <label className="block mb-1 font-medium">Title</label>
          <input
            type="text"
            name="title"
            value={postData.title}
            onChange={handleChange}
            className="w-full border rounded px-3 py-2 bg-transparent outline-none"
            required
          />
        </div>
        <div>
          <label className="block mb-1 font-medium">Description</label>
          <textarea
            name="description"
            value={postData.description}
            onChange={handleChange}
            rows="4"
            className="w-full border rounded px-3 py-2 bg-transparent outline-none resize-none"
            required
          ></textarea>
        </div>
        <div>
          <label className="block mb-1 font-medium">Attachment</label>
          <input
            type="file"
            name="attachments"
            onChange={handleChange}
            className="w-full"
          />
        </div>
        <button
          type="submit"
          className={`w-full py-2 px-4 rounded transition ${isPending || showLoader ? 'bg-gray-600 cursor-not-allowed' : 'bg-gray-800 hover:bg-gray-700'}`}
          disabled={isPending || showLoader}
        >
          {isPending || showLoader ? (
            <div className="flex items-center justify-center gap-2">
              <Loader2 className="animate-spin w-5 h-5" />
              Generating your description...
            </div>
          ) : (
            'Upload Post'
          )}
        </button>
      </form>
    </div>
  );
};

export default UploadPost;
